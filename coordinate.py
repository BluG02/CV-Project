import cv2
import numpy as np
import ffmpeg
import sys

# --- 설정 변수 ---
FFMPEG_EXE = r"C:\Users\ckseh\OneDrive\바탕 화면\공모전\학술제\ffmpeg-7.1.1-essentials_build\ffmpeg-7.1.1-essentials_build\bin\ffmpeg.exe"
RTMP_URL = "rtmp://34.47.71.66/live/cam1"
WIDTH, HEIGHT = 640, 360

# 저장할 Python 설정 파일 경로
PYTHON_CONFIG_PATH = "C:/Users/ckseh/OneDrive/바탕 화면/공모전/학술제/CV-Project/polygons_config.py"

# 좌표를 지정할 좌석 이름 리스트
SEAT_NAMES = [f"seat{i+1}" for i in range(34)] # 총 34개의 좌석

# --- 전역 변수 ---
drawing = False
ref_point = []
polygons_data = {}
current_seat_index = 0
frame = None

def select_area_callback(event, x, y, flags, param):
    global ref_point, drawing, frame, polygons_data, current_seat_index

    if current_seat_index >= len(SEAT_NAMES):
        return

    if event == cv2.EVENT_LBUTTONDOWN:
        ref_point = [(x, y)]
        drawing = True

    elif event == cv2.EVENT_LBUTTONUP:
        ref_point.append((x, y))
        drawing = False

        x1, y1 = ref_point[0]
        x2, y2 = ref_point[1]
        start_x, start_y = min(x1, x2), min(y1, y2)
        end_x, end_y = max(x1, x2), max(y1, y2)

        four_points = [
            (start_x, start_y), (end_x, start_y),
            (end_x, end_y), (start_x, end_y)
        ]

        seat_name = SEAT_NAMES[current_seat_index]
        polygons_data[seat_name] = four_points
        print(f"[저장됨] {seat_name}: {four_points}")
        current_seat_index += 1

def save_polygons_to_py(data, file_path):
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write("# This file is auto-generated by coordinate.py\n")
            f.write("# Do not edit this file manually.\n\n")
            f.write("polygons_detected = {\n")
            for name, points in data.items():
                f.write(f"    '{name}': {points},\n")
            f.write("}\n")
        print(f"\n 좌표 데이터가 {file_path} 파일에 성공적으로 저장되었습니다.")
    except IOError as e:
        print(f" 파일 쓰기 오류: {e}")

# --- 메인 실행 코드 ---
# 기존 좌표가 있다면 로드
try:
    # 파이썬의 import 캐시 문제를 피하기 위해
    if 'polygons_config' in sys.modules:
        del sys.modules['polygons_config']
    from polygons_config import polygons_detected
    polygons_data = polygons_detected
    print("기존에 저장된 좌표를 불러왔습니다.")
    # 이어서 작업할 좌석 인덱스 찾기
    for i, seat in enumerate(SEAT_NAMES):
        if seat not in polygons_data:
            current_seat_index = i
            break
    else:
        current_seat_index = len(SEAT_NAMES)
except ImportError:
    print("기존 좌표 파일(polygons_config.py)을 찾을 수 없습니다. 새로 시작합니다.")
    polygons_data = {}

# FFmpeg 프로세스 시작
process = (
    ffmpeg
    .input(RTMP_URL, fflags='nobuffer', flags='low_delay', rtbufsize='100M')
    .output('pipe:', format='rawvideo', pix_fmt='bgr24', s=f'{WIDTH}x{HEIGHT}')
    .run_async(pipe_stdout=True, cmd=FFMPEG_EXE)
)

cv2.namedWindow("Coordinate Setup")
cv2.setMouseCallback("Coordinate Setup", select_area_callback)

print("RTMP 스트림을 불러오는 중입니다...")

while True:
    in_bytes = process.stdout.read(WIDTH * HEIGHT * 3)
    if not in_bytes:
        print(" 스트림 수신 실패. 프로그램을 종료합니다.")
        break

    frame = np.frombuffer(in_bytes, np.uint8).reshape([HEIGHT, WIDTH, 3])
    display_frame = frame.copy()

    if current_seat_index < len(SEAT_NAMES):
        seat_to_set = SEAT_NAMES[current_seat_index]
        msg = f"Set: {seat_to_set}. Drag area. Press 'r' to reset last."
        cv2.putText(display_frame, msg, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 2)
    else:
        msg = "All seats are set. Press 's' to save and 'q' to quit."
        cv2.putText(display_frame, msg, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

    for name, points in polygons_data.items():
        cv2.polylines(display_frame, [np.array(points, np.int32)], isClosed=True, color=(0, 255, 0), thickness=2)
        cv2.putText(display_frame, name, (points[0][0], points[0][1] - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 255), 1)

    cv2.imshow("Coordinate Setup", display_frame)

    key = cv2.waitKey(1) & 0xFF
    if key == ord('s'):
        save_polygons_to_py(polygons_data, PYTHON_CONFIG_PATH)
    elif key == ord('q'):
        break
    elif key == ord('r'):
        if current_seat_index > 0:
            current_seat_index -= 1
            last_seat_name = SEAT_NAMES[current_seat_index]
            if last_seat_name in polygons_data:
                del polygons_data[last_seat_name]
            print(f"[리셋] {last_seat_name}의 좌표를 다시 설정하세요.")

process.stdout.close()
process.wait()
cv2.destroyAllWindows()

print("\n프로그램이 종료되었습니다.")